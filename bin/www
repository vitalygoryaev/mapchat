#!/usr/bin/env node

/**
 * Module dependencies.
 */

let app = require('../app');
let debug = require('debug')('mapchat:server');
let https = require('https');
let http = require('http');
let express = require('express');
let fs = require('fs');

/**
 * Get port from environment and store in Express.
 */

let httpsPort = 8443;
let httpPort = 3000;

let port = normalizePort(process.env.PORT || httpsPort);
app.set('port', httpsPort);

/**
 * Create HTTP server.
 */

let server;

if (process.env.NODE_ENV === 'production') {

  let httpApp = express();

  // redirect everything from http to https
  httpApp.get('*', function (req, res) {
    res.redirect('https://' + req.hostname + req.url)
  });

  let httpServer = http.createServer(httpApp);
  httpServer.listen(httpPort);

  /**
   * SSL Options
   */

  let options = {
    key: fs.readFileSync('/etc/letsencrypt/live/mapchat.info/privkey.pem'),
    cert: fs.readFileSync('/etc/letsencrypt/live/mapchat.info/cert.pem'),
    ca: fs.readFileSync('/etc/letsencrypt/live/mapchat.info/chain.pem')
  };

  server = https.createServer(options, app).listen(httpsPort);

} else {
  // for dev just serve on http
  server = http.createServer(app).listen(httpPort);
}

let io = require('socket.io')(server);
let sockets = require('../sockets').call({io});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  let port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  let bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  let addr = server.address();
  let bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

console.log('server is running on port ' + httpsPort);
